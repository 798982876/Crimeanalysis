-- FUNCTION: crimestat.datacluster(json, json, integer)

-- DROP FUNCTION crimestat.datacluster(json, json, integer);

CREATE OR REPLACE FUNCTION crimestat.datacluster(
	time_extend json,
	space_extend json,
	layerth integer)
    RETURNS TABLE(g_geohash character varying, p_time character varying, counts integer, row_zero integer, col_zero integer) 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$declare
start_time varchar:= time_extend->'start_time';
end_time varchar:= time_extend->'end_time';
west float:= space_extend->'west';
east float:= space_extend->'east';
south float:= space_extend->'south';
north float:= space_extend->'north';

min_r integer;
min_c integer;
query_space geometry;
begin

query_space := ST_MakeEnvelope(west,south,east,north,4326)::geometry;

--获得数据data 在时间范围内 在空间范围内
create temp table if not exists query_events on commit drop as 
(
	select sid, to_char(时间,'YYYYMMDDHH24') as p_time,glib.f_geodetic2quadtree(ST_X(geometry(地理位置))::numeric, ST_Y(geometry(地理位置))::numeric, layerth) as g_geohash 
	from crimestat.v_incidents
	where 
 	to_timestamp(start_time,'YYYYMMDDHH24')<=时间 
	and to_timestamp(end_time,'YYYYMMDDHH24')>=时间
and  ST_Covers(query_space,geometry(地理位置)));

--依据 geohash 和 time聚类
 create temp table if not exists cluster_events on commit drop as 
(select query_events.p_time,query_events.g_geohash,count(sid) as counts from query_events group by query_events.g_geohash, query_events.p_time);

--依据geohash计算 从0开始的行列号
--获得原始行列号
create temp table if not exists rc_event_t  on commit drop as
(select cluster_events.g_geohash, cluster_events.p_time, cluster_events.counts,(glib.f_quadtree2rowcol(cluster_events.g_geohash))[1] as row_t,(glib.f_quadtree2rowcol(cluster_events.g_geohash))[2] as col_t from cluster_events);

--return query select  rc_event_t.g_geohash::varchar, rc_event_t.p_time::varchar, rc_event_t.counts::integer,row_t::integer,col_t::integer from rc_event_t;
min_r := (select min(rc_event_t.row_t) from rc_event_t);
 min_c := (select min(rc_event_t.col_t) from rc_event_t);

--获得从0开始的行列号
 return query select rc_event_t.g_geohash::varchar,rc_event_t.p_time::varchar, rc_event_t.counts::integer, rc_event_t.row_t-min_r as row_zero, rc_event_t.col_t-min_c as col_zero from rc_event_t order by rc_event_t.p_time,rc_event_t.g_geohash;

	

end;
$BODY$;

ALTER FUNCTION crimestat.datacluster(json, json, integer)
    OWNER TO postgres;




运行程序
select crimestat.datacluster('{

        "end_time": 2012123123,

        "timestep": "1",

        "start_time": 2012010100

    }'::json, '{

        "east": 121.382326,

        "west": 119.914598,

        "north": 32.036541,

        "south": 30.760336

    }'::json,14);

